---
title: "Getting started with R"
author: Abhijith Senthilkumar
date: 23.09.2024
format: html
---

### Exercise 1 {#sec-1}

* Create a vector of the letters A, B and C.

```{r}
c("A","B","C")

```
> Your answer as text
[1] "A" "B" "C"


* Assign the vector to a variable `my_letters`
```{r}
my_letters <- c("A","B","C")
print(my_letters)
```


* Check the what happens when you run `letters` (just this) on the command line.
```{r}
print(letters)

```

> Your answer as text
All the letters of the alphabet are printed in a vector format.



* What happens when you concatenate two vectors? Add `c(my_letters , my_letters)`
```{r}
concatLetters <- c(my_letters, my_letters)
print(concatLetters)
```

> Your answer as text
It is exactly as concatenate works, there is no change to the order or it is not sorted, the second vector is added to the first vector and printed together. 


* Add the number 1 to letters. What happens to the type of the vector?
```{r}
# Your answer in code
typeof(my_letters)
c(my_letters,1)
typeof(my_letters)

```

> Your answer as text
When concatenated, the number is appended to the end of the vector, and is converted to char dtype. 



### Exercise 2


1. Create a vector `my_vec` with the numbers from 1 through 8.
2. Apply the operation `+2` to the vector/
3. Add the vector containing 1, 2, 3, 4 to `my_vec`. What do you observe?

```{r}
my_vec <- c(1:8)
print(my_vec)
my_vec <- my_vec + 2
print(my_vec)
my_vec <- my_vec + c(1,2,3,4)
print(my_vec)
```
> Your answer as text
First, the vector is created, then each element of the vector is added +2. 3rd, since my_vec has 8 elements, the vector added to it will repeat itself to look like (1,2,3,4,1,2,3,4), and add itself to the existing elements in the respective indexes. 

### Exercise 3

* Consider the R output of the matrix below:

```
 [,1] [,2]
 [1,]    4    1
 [2,]    9    5
 [3,]   10    7
```

1. What was one of the correct commands used to write this matrix?
The correct command is using the matrix() function
2. Assign the matrix as `A`
3. Check the dimensions
4. Extract the element `5`
5. Add the vector `c(0,0,0)` as a new column and update `A`
6. Modify the element 4 to `0`
7. Compute the transpose of `A`

```{r}
# Your answer in code
#Assigning the Matrix as A
x=c(4,9,10)
y=c(1,5,7)

A <- matrix(c(x,y), ncol=2)
print(A)

#or

A <- matrix(c(4,9,10,1,5,7), nrow=3, ncol=2)
print(A)

#Checking the dimensions
print(dim(A))

#Extract the element '5'
print(A[2,2])

#Add vector as new column and update A
A <- cbind(A, c(0,0,0))
print(A)

#Modify element 4 to '0'
A[1,1] <- 0
print(A)

#Compute transpose of A
ATranspose <- t(A)
print(ATranspose)
```


8. Are any values in `A` larger than 10? 
```{r}
count <- 0
for (i in A) {
  if (i > 10){
    count <- count+1}
}
if (count >= 1){
  print("yes")
}else {
  print("no")
}

any(A>10)
```

9. Are all values in `A` smaller than 10?
```{r}
j<-0
for (i in A) {
  if (i>10)
    j <- j+1
}

if (j>=1){
  print("No")
}else
  print("yes")

all(A<=10)
```

### Exercise 4

1. Create a function that sums up two values even if provided as characters values

```{r}
sumFunction <- function(x) {
  num_x <- as.numeric(x)
  return(sum(num_x))
}

x <- c("5", "10")
print(sumFunction(x))
```


### Exercise 5

1. Create a function that returns the mean, median and standard deviation.

```{r}
# Your answer in code
allRounder <- function(x){
  m1 <- mean(x)
  m2 <- median(x)
  sd <- sd(x)
  return (list(mean=m1,median=m2,sd=sd))
}

x <- c(34,56,87,65,34,56,89)
print(allRounder(x))
```


### Exercise 6
1. Create a pipe statement that counts the number of NAs in vector containing numbers, characters and missing values.
The output of `c('1' , "a", NA, "2", NA)` should be 2.

```{r}
library(magrittr)

myVec <- c('1' , "a", NA, "2", NA)

num_NA <- vec %>%
  is.na() %>%
  sum()

print(num_NA)

```


